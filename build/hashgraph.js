// Generated by CoffeeScript 1.10.0
(function() {
  var Visualizer, draw, eventWidth, height, makeMachine, names, topOffset;

  Visualizer = {
    machines: []
  };

  Visualizer.addMachine = function(node) {
    return Visualizer.machines.push(node);
  };

  makeMachine = function(name) {
    var events, gossip, knownMachines, machine, receiveGossip;
    knownMachines = [];
    events = [];
    gossip = function() {
      return console.log(node.name, ' is gossipping to ');
    };
    receiveGossip = function() {
      return console.log(node.name, ' received gossip ');
    };
    machine = {
      name: name,
      gossip: gossip,
      receiveGossip: receiveGossip,
      events: events,
      knownMachines: knownMachines
    };
    knownMachines.push(machine);
    events.push({
      node: machine,
      hash: Math.random()
    });
    return machine;
  };

  height = 300;

  eventWidth = 30;

  topOffset = 20;

  draw = function() {
    var circle, event, eventIndex, eventX, i, index, j, k, len, len1, len2, machine, machineIndex, machineWidth, node, path, rect, ref, ref1, ref2, results, startHeight, text, timelineX;
    Visualizer.clear();
    timelineX = eventWidth;
    ref = Visualizer.machines;
    results = [];
    for (machineIndex = i = 0, len = ref.length; i < len; machineIndex = ++i) {
      machine = ref[machineIndex];
      machineWidth = machine.knownMachines.length * eventWidth + eventWidth;
      rect = Visualizer.rect(timelineX - eventWidth, topOffset, machineWidth, height);
      rect.attr({
        stroke: '#ccc',
        fill: '#fafafa'
      });
      text = Visualizer.text(timelineX + machineWidth / 2 - eventWidth, 8, machine.name);
      startHeight = height - 30;
      ref1 = machine.knownMachines;
      for (index = j = 0, len1 = ref1.length; j < len1; index = ++j) {
        node = ref1[index];
        path = Visualizer.path("M " + (timelineX + index * eventWidth) + "," + startHeight + " l 0," + (-startHeight + topOffset));
        path.attr({
          stroke: '#333'
        });
        text = Visualizer.text(timelineX + index * eventWidth, height - 10, node.name);
      }
      ref2 = machine.events;
      for (eventIndex = k = 0, len2 = ref2.length; k < len2; eventIndex = ++k) {
        event = ref2[eventIndex];
        eventX = timelineX + machine.knownMachines.indexOf(event.node) * eventWidth;
        circle = Visualizer.circle(eventX, startHeight, 10);
        circle.attr("fill", "#EEE");
        circle.attr("stroke", "#333");
      }
      results.push(timelineX += machineWidth + 15);
    }
    return results;
  };

  names = ['Alice', 'Bob', 'Charly', 'Dan', 'Eve', 'Fred', 'Gus', 'Henry', 'Ivy', 'Jim'];

  $(function() {
    Visualizer.__proto__ = Raphael(document.getElementById('hashgraph_visualizer'));
    $('button#add-node').click(function() {
      var newMachine;
      newMachine = makeMachine(names[Visualizer.machines.length]);
      Visualizer.addMachine(newMachine);
      Visualizer.machines[0].knownMachines.push(newMachine);
      return draw();
    });
    return $('button#add-node').click();
  });

}).call(this);
